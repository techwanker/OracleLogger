SQL> @ dblogger_uninstall.sr.sql
SQL> /* logger objects */
SQL> drop sequence cursor_info_id_seq;
drop sequence cursor_info_id_seq
              *
ERROR at line 1:
ORA-02289: sequence does not exist 


SQL> drop sequence cursor_info_run_id_seq;
drop sequence cursor_info_run_id_seq
              *
ERROR at line 1:
ORA-02289: sequence does not exist 


SQL> drop sequence job_log_id_seq;

Sequence dropped.

SQL> drop sequence job_msg_id_seq;

Sequence dropped.

SQL> drop sequence job_step_id_seq;

Sequence dropped.

SQL> drop table cursor_explain_plan cascade constraint;
drop table cursor_explain_plan cascade constraint
           *
ERROR at line 1:
ORA-00942: table or view does not exist 


SQL> drop table cursor_info cascade constraint;
drop table cursor_info cascade constraint
           *
ERROR at line 1:
ORA-00942: table or view does not exist 


SQL> drop table cursor_info_run cascade constraint;
drop table cursor_info_run cascade constraint
           *
ERROR at line 1:
ORA-00942: table or view does not exist 


SQL> drop table cursor_sql_text cascade constraint;
drop table cursor_sql_text cascade constraint
           *
ERROR at line 1:
ORA-00942: table or view does not exist 


SQL> drop table cursor_stat cascade constraint;
drop table cursor_stat cascade constraint
           *
ERROR at line 1:
ORA-00942: table or view does not exist 


SQL> drop view cursor_info_vw;
drop view cursor_info_vw
*
ERROR at line 1:
ORA-00942: table or view does not exist 


SQL> drop table job_log cascade constraint;

Table dropped.

SQL> drop table job_msg cascade constraint;

Table dropped.

SQL> drop table job_step cascade constraint;

Table dropped.

SQL> drop view job_log_vw;

View dropped.

SQL> drop view job_step_vw;

View dropped.

SQL> /* application object */
SQL> drop package logger;

Package dropped.

SQL> drop package pllogger;
drop package pllogger
*
ERROR at line 1:
ORA-04043: object PLLOGGER does not exist 


SQL> drop package pllog;
drop package pllog
*
ERROR at line 1:
ORA-04043: object PLLOG does not exist 


SQL> @ job_tables.sr.sql
SQL> create sequence job_log_id_seq;

Sequence created.

SQL> 
SQL> create table job_log (
  2  	 job_log_id number(9),
  3  	 job_token	      varchar(64),
  4  	 schema_name	      varchar(30),
  5  	 process_name	      varchar(128),
  6  	 thread_name	      varchar(128),
  7  	 status_msg	      varchar(256),
  8  	 status_ts	      timestamp(9),
  9  	 start_ts	      timestamp(9),
 10  	 end_ts 	      timestamp(9),
 11  	 log_level	      number(1),
 12  	 elapsed_millis       number(9),
 13  	 sid		      number,
 14  	 serial_nbr	      number,
 15  	 ignore_flg	      varchar(1) default 'N' not null,
 16  	 module_name	      varchar(64),
 17  	 classname	      varchar(255),
 18  	 tracefile_name       varchar(4000),
 19  	 msg_lvl	      number(1),
 20  	 trace_level	      number(2),
 21  	 directory_name       varchar(128),
 22  	 logfile_name	      varchar(64),
 23  	 tracefile_data       clob,
 24  	 tracefile_json       clob,
 25  	 abort_stacktrace     clob,
 26  	 check ( ignore_flg in ('Y', 'N')) ,
 27  	 constraint job_log_pk primary key (job_log_id)
 28  	);

Table created.

SQL> 
SQL> create sequence job_step_id_seq;

Sequence created.

SQL> 
SQL> alter table job_log add constraint job_log_token_uq unique (job_token);

Table altered.

SQL> 
SQL> create table job_step (
  2  	 job_step_id		 number(9),
  3  	 job_log_id		 number(9),
  4  	 step_name		 varchar(64),
  5  	 classname		 varchar(256),
  6  	 step_info		 varchar(2000),
  7  	 start_ts		 timestamp(9),
  8  	 end_ts 		 timestamp(9),
  9  	 dbstats		 clob,
 10  	 step_info_json 	 clob,
 11  	 --cursor_info_run_id	   number(9) references cursor_info_run,
 12  	 stacktrace		 varchar(4000),
 13  	 constraint job_step_pk primary key (job_step_id),
 14  	 constraint step_status_fk
 15  	     foreign key (job_log_id) references job_log
 16  );

Table created.

SQL> 
SQL> create sequence job_msg_id_seq;

Sequence created.

SQL> 
SQL> create table job_msg (
  2  	 job_msg_id	   number(9) not null,
  3  	 job_log_id	   number(9) not null,
  4  	 job_step_id	   number(9),
  5  	 log_msg_id	       varchar2(8) not null,
  6  	 log_msg	       varchar2(256),
  7  	 log_msg_clob	   clob,
  8  	 log_msg_ts	       timestamp (9),
  9  	 elapsed_time_milliseconds number(9),
 10  	 log_seq_nbr	       number(18,0) not null,
 11  	 caller_name	   varchar2(100),
 12  	 line_nbr	       number(5,0),
 13  	 call_stack	       clob,
 14  	 log_level	       number(2,0),
 15  	 constraint job_msg_pk primary key (job_log_id, log_seq_nbr)
 16  );

Table created.

SQL> 
SQL> 
SQL> alter table job_msg
  2  add constraint job_msg_job_log_fk
  3  foreign key (job_log_id)
  4  references job_log(job_log_id);

Table altered.

SQL> 
SQL> alter table job_msg
  2  add constraint job_fk
  3  foreign key (job_step_id)
  4  references job_step(job_step_id);

Table altered.

SQL> 
SQL> create or replace view job_step_vw as
  2  select
  3  	 job_step_id,
  4  	 job_log_id,
  5  	     step_name,
  6  	     classname ,
  7  	     step_info,
  8  	 start_ts,
  9  	 end_ts ,
 10  	 end_ts - start_ts elapsed_millis
 11  from job_step;

View created.

SQL> 
SQL> create or replace view job_log_vw as
  2  select
  3  	job_log_id,
  4  	schema_name,
  5  	process_name,
  6  	thread_name,
  7  	status_msg,
  8  	status_ts,
  9  	end_ts,
 10  	sid,
 11  	serial_nbr,
 12  	ignore_flg,
 13  	module_name,
 14  	classname,
 15  	tracefile_name,
 16  	end_ts - status_ts elapsed_millis
 17  from job_log;

View created.

SQL> 
SQL> @ logger_tables.sr.sql
SQL> set echo on
SQL> create table logger_hdr
  2  (
  3  	     logger_hdr_id  number(9)	 primary key,
  4  	     logger_set_nm  varchar(32)  unique not null,
  5  	     default_lvl    number(1)	 not null
  6  );
create table logger_hdr
             *
ERROR at line 1:
ORA-00955: name is already used by an existing object 


SQL> 
SQL> create sequence logger_hdr_id_seq;
create sequence logger_hdr_id_seq
                *
ERROR at line 1:
ORA-00955: name is already used by an existing object 


SQL> 
SQL> create table logger_dtl
  2  (
  3  	     logger_dtl_id number(9)   primary key,
  4  	     logger_hdr_id number(9)   references logger_hdr,
  5  	     logger_nm	   varchar(132),
  6  	     log_lvl	   number(1) not null,
  7  	     constraint logger_dtl_uniq unique (logger_hdr_id, logger_nm)
  8  );
create table logger_dtl
             *
ERROR at line 1:
ORA-00955: name is already used by an existing object 


SQL> 
SQL> create sequence logger_dtl_id_seq;
create sequence logger_dtl_id_seq
                *
ERROR at line 1:
ORA-00955: name is already used by an existing object 


SQL> 
SQL> 
SQL> 
SQL> @ logger_hdr_dtl.sql
SQL> create or replace view logger_hdr_dtl as
  2  select
  3  	 h.logger_set_nm,
  4  	 d.logger_nm,
  5  	 d.log_lvl,
  6  	 h.default_lvl
  7  from
  8  	 logger_hdr h,
  9  	 logger_dtl d
 10  where h.logger_hdr_id = d.logger_dtl_id
 11  order by logger_set_nm, logger_nm;

View created.

SQL> @ logger.pks.sr.sql
SQL> --%# Logger package
SQL> set echo on
SQL> 
SQL> --%```
SQL> create or replace PACKAGE logger AS
  2  	 G_SEVERE	CONSTANT PLS_INTEGER := 1 ;
  3  	 G_WARNING	CONSTANT PLS_INTEGER := 2 ;
  4  	 G_INFO 	CONSTANT PLS_INTEGER := 4 ;
  5  	 G_SNAP 	CONSTANT PLS_INTEGER := 5 ;
  6  	 G_ENTERING	CONSTANT PLS_INTEGER := 6 ;
  7  	 G_EXITING	CONSTANT PLS_INTEGER := 6 ;
  8  	 G_FINE 	CONSTANT PLS_INTEGER := 7 ;
  9  	 G_FINER	CONSTANT PLS_INTEGER := 8 ;
 10  	 G_FINEST	CONSTANT PLS_INTEGER := 9 ;
 11  	 G_NONE 	CONSTANT PLS_INTEGER := 10 ;
 12  
 13  	 SEVERE       CONSTANT PLS_INTEGER := 1 ;
 14  	 WARNING      CONSTANT PLS_INTEGER := 2 ;
 15  	 INFO	      CONSTANT PLS_INTEGER := 4 ;
 16  	 VERBOSE      CONSTANT PLS_INTEGER := 5 ;
 17  	 VERY_VERBOSE CONSTANT PLS_INTEGER := 6 ;
 18  	 DEBUG	      CONSTANT PLS_INTEGER := 7 ;
 19  	 TRACE	      CONSTANT PLS_INTEGER := 9 ;
 20  	 NONE	      CONSTANT PLS_INTEGER := 10 ;
 21  --%```
 22  
 23  
 24  --%```
 25  	 function format_timestamp(timestamp in timestamp)
 26  	 return varchar;
 27  --%```
 28  
 29  --%```
 30  	 function get_new_job_log_id
 31  	 return number;
 32  --%```
 33  
 34  --%# Logging
 35  
 36  --%## Specify log destination
 37  
 38  --%```
 39  	 procedure begin_log (
 40  	     logfile_name   in varchar,
 41  	     logfile_directory in varchar default 'JOB_MSG_DIR',
 42  	     process_name in varchar default null,
 43  	     log_set	  in varchar default null,
 44  	     classname	  in varchar default null,
 45  	     module_name  in varchar default null,
 46  	     status_msg   in varchar default null,
 47  	     thread_name  in varchar default null,
 48  	     log_level	  in pls_integer default G_INFO,
 49  	     trace_level  in pls_integer default G_INFO);
 50  --%```
 51  
 52  --%## Filter
 53  --%```
 54  	 procedure set_caller_level(name in varchar ,
 55  				   level in pls_integer);
 56  --%```
 57  --%## Log
 58  --%```
 59  	 procedure log (
 60  	   log_msg     in   varchar,
 61  	   log_level	in   pls_integer default g_info,
 62  	   dumstack   in   boolean default false
 63  	);
 64  --%```
 65  
 66  --%#  job
 67  
 68  --%## begin_job
 69  
 70  
 71  --%```
 72  	FUNCTION begin_job (
 73  	     process_name in varchar,
 74  	     log_set	  in varchar default null,
 75  	     classname	  in varchar default null,
 76  	     module_name  in varchar default null,
 77  	     status_msg   in varchar default null,
 78  	     thread_name  in varchar default null,
 79  	     logfile_name   in varchar default null,
 80  	     logfile_directory in varchar default 'JOB_MSG_DIR',
 81  	     log_level	  in pls_integer default G_INFO,
 82  	     trace_level  in pls_integer default G_INFO)
 83  	     return varchar;
 84  --%```
 85  
 86  --%## start step
 87  
 88  --%```
 89  	function job_step_insert (
 90  	     step_name	 in varchar,
 91  	     step_info	 in varchar default null,
 92  	     classname	 in varchar default null,
 93  	     stacktrace  in varchar default null
 94  	) return number;
 95  --%```
 96  
 97  --%## finish step
 98  
 99  --%```
100  	procedure job_step_finish (step_id in number);
101  --%```
102  --%## Finish job
103  --%```
104  	 procedure end_job;
105  --%```
106  
107  --%## Abort job
108  --%```
109  	 procedure abort_job(exception_msg in varchar default null,
110  		     stacktrace in varchar default null);
111  --%```
112  
113  
114  
115  --%# TODO
116  --%```
117  	 procedure set_action (action in	varchar) ;
118  --%```
119  
120  --%```
121  	 procedure set_module (
122  	     module_name in	   varchar,
123  	     action_name in   varchar
124  	 );
125  --%```
126  
127  --%# sql trace
128  --%```
129  	 function get_tracefile(file_name in varchar)
130  	 return clob;
131  --%```
132  
133  --%```
134  	 function get_my_tracefile_name
135  	 return varchar;
136  --%```
137  
138  --%```
139  	 function set_tracefile_identifier(job_nbr in number)
140  	 return varchar;
141  --%```
142  
143  --%```
144  	 function get_my_tracefile
145  	 return clob ;
146  --%```
147  
148  
149  --%# misc
150  --%```
151  	 function basename (full_path in varchar,
152  			    suffix    in varchar default null,
153  			    separator in char default '/')
154  	 return varchar;
155  --%```
156  
157  --%```
158  	 procedure prepare_connection;
159  --%```
160  
161  --%```
162  	 procedure trace_step(step_name in varchar, job_step_id in number);
163  --%```
164  
165  
166  --%```
167  	 function get_directory_path
168  	 return varchar;
169  --%```
170  
171  --%```
172  	 procedure set_debug(debug boolean default true) ;
173  --%```
174  
175  END logger;
176  /

Package created.

SQL> show errors
No errors.
SQL> @ logger.pkb.sr.sql
SQL> --#<
SQL> set echo on
SQL> spool logger.pkb.sr.lst
